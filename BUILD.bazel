package(default_visibility = ["//visibility:public"])

load("//build_defs:gentest.bzl", "gentest_suite")


cc_binary(
    name = "gentest_codegen",
    srcs = [
        "tools/src/main.cpp",
        "tools/src/parse_core.cpp",
        "tools/src/parse.cpp",
        "tools/src/discovery.cpp",
        "tools/src/mock_discovery.cpp",
        "tools/src/validate.cpp",
        "tools/src/emit.cpp",
        "tools/src/render_mocks.cpp",
        "tools/src/type_kind.cpp",
        "tools/src/render.cpp",
        "tools/src/tooling_support.cpp",
    ] + glob(["tools/src/*.hpp"]),
    copts = [
        "-std=c++23",
        "-Iinclude",
        "-Itools/src",
        "-DFMT_HEADER_ONLY",
        "-Wno-unknown-attributes",
        "-Wno-attributes",
    ],
    linkopts = [
        "-L/usr/local/lib",
        "-lclang-cpp",
        "-Wl,-rpath,/usr/local/lib",
        "-pthread",
    ],
)

gentest_suite(name = "gentest_unit_tests", suite = "unit")
gentest_suite(name = "gentest_integration_tests", suite = "integration")
gentest_suite(name = "gentest_fixtures_tests", suite = "fixtures")
gentest_suite(name = "gentest_skiponly_tests", suite = "skiponly")
# gentest_suite(name = "gentest_templates_tests", suite = "templates")
# Optionally enable mocking once stable under sandbox
# gentest_suite(name = "gentest_mocking_tests", suite = "mocking")

sh_test(
    name = "codegen_check_valid",
    srcs = ["scripts/bazel_codegen_check.sh"],
    data = [":gentest_codegen", "tests/unit/cases.cpp"],
    args = ["$(location :gentest_codegen)", "valid"],
)

sh_test(
    name = "codegen_check_invalid",
    srcs = ["scripts/bazel_codegen_check.sh"],
    data = [":gentest_codegen", "tests/smoke/invalid_attrs.cpp"],
    args = ["$(location :gentest_codegen)", "invalid"],
)
