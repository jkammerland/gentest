name: cmake

on:
  push:
  pull_request:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CTEST_OUTPUT_ON_FAILURE: 1

jobs:
  macos:
    name: macOS • ${matrix.compiler} • ${matrix.build-type}
    runs-on: macos-14
    strategy:
        fail-fast: false
        matrix:
            compiler: ["appleclang", "llvm"]
            build-type: ["debug", "release"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select bundled Xcode toolchain
        if: matrix.compiler == 'appleclang'
        run: sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer

      - name: Install dependencies (Homebrew)
        run: |
          brew update
          brew install llvm ninja ccache

      - name: Configure LLVM environment
        run: |
          LLVM_PREFIX="$(brew --prefix llvm)"
          echo "LLVM_DIR=${LLVM_PREFIX}/lib/cmake/llvm" >> $GITHUB_ENV
          echo "PATH=${LLVM_PREFIX}/bin:$PATH" >> $GITHUB_ENV
          if [ "${{ matrix.compiler }}" = "llvm" ]; then
            echo "LLVM_BIN=${LLVM_PREFIX}/bin" >> $GITHUB_ENV
          fi

      - name: Configure environment
        run: |
          echo "SDKROOT=$(xcrun --show-sdk-path)" >> $GITHUB_ENV
          echo "CCACHE_DISABLE=1" >> $GITHUB_ENV
          echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v3

      - name: Show tool versions
        run: |
          cmake --version
          ninja --version
          COMPILER_BIN="${LLVM_BIN:-/usr/bin}"
          "${COMPILER_BIN}/clang" --version

      - name: Setup vcpkg
        run: bash scripts/setup-vcpkg.sh

      - name: Configure
        run: |
          COMPILER_BIN="${LLVM_BIN:-/usr/bin}"
          CMAKE_ARGS=(
            "--preset=${{ matrix.build-type }}"
            "-DCMAKE_C_COMPILER=${COMPILER_BIN}/clang"
            "-DCMAKE_CXX_COMPILER=${COMPILER_BIN}/clang++"
            "-DVCPKG_CHAINLOAD_TOOLCHAIN_FILE="
          )
          if [ -n "${LLVM_DIR:-}" ]; then
            CMAKE_ARGS+=("-DLLVM_DIR=${LLVM_DIR}")
          fi
          cmake "${CMAKE_ARGS[@]}"

      - name: Build
        run: cmake --build --preset=${{ matrix.build-type }}

      - name: Test
        run: ctest --preset=${{ matrix.build-type }} --output-on-failure

  windows:
    name: Windows • clang-cl • ${{ matrix.build-type }}
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        build-type: ["debug", "release"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@v3

      - name: Ensure LLVM is up to date
        shell: pwsh
        run: choco upgrade llvm -y --no-progress

      - name: Add LLVM to PATH
        run: echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Set LLVM CMake path
        shell: pwsh
        run: |
          $llvmPrefix = "${Env:ProgramFiles}\LLVM"
          "LLVM_DIR=$llvmPrefix\lib\cmake\llvm" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Show tool versions
        shell: pwsh
        run: |
          cmake --version
          ninja --version
          clang-cl --version

      - name: Setup vcpkg
        shell: pwsh
        run: bash scripts/setup-vcpkg.sh

      - name: Configure
        shell: pwsh
        run: cmake --preset=${{ matrix.build-type }} -DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl -DLLVM_DIR="$env:LLVM_DIR"

      - name: Build
        shell: pwsh
        run: cmake --build --preset=${{ matrix.build-type }}

      - name: Test
        shell: pwsh
        run: ctest --preset=${{ matrix.build-type }} --output-on-failure

  ubuntu:
    name: Ubuntu • LLVM ${{ matrix.llvm-version }} • ${{ matrix.build-type }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        llvm-version: ["18", "19", "20"]
        build-type: ["debug", "release"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up CMake latest
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: latest

      - name: Install build deps (Ubuntu)
        run: sudo apt-get update && sudo apt-get install -y ninja-build ccache curl zip unzip tar libc++-dev libc++abi-dev libunwind8

      - name: Setup vcpkg (script)
        run: bash scripts/setup-vcpkg.sh

      - name: Install LLVM/Clang ${{ matrix.llvm-version }}
        id: llvm
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "${{ matrix.llvm-version }}"

      - name: Install LLVM runtime deps (Ubuntu)
        run: sudo apt-get update && sudo apt-get install -y libtinfo5

      - name: Show tool versions
        run: |
          cmake --version
          ninja --version
          clang++ --version || true
          llvm-config --version

      - name: Configure (${{ matrix.build-type }} with vcpkg)
        run: cmake --preset=${{ matrix.build-type }} -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++

      - name: Build
        run: cmake --build --preset=${{ matrix.build-type }} --parallel

      - name: Test
        run: ctest --preset=${{ matrix.build-type }} --output-on-failure

  fedora:
    name: Fedora 42 • LLVM ${{ matrix.llvm-version }} • ${{ matrix.build-type }}
    runs-on: ubuntu-24.04
    container:
      image: fedora:42
    strategy:
      fail-fast: false
      matrix:
        llvm-version: ["18", "19", "20"]
        build-type: ["debug", "release"]
    steps:
      - name: Install base packages (Fedora)
        run: |
          dnf -y upgrade --refresh
          dnf -y install git which tar xz ninja-build ccache gcc-c++ make curl ca-certificates ncurses-compat-libs zip unzip libcxx libcxx-devel libcxxabi libcxxabi-devel libunwind libunwind-devel llvm-libunwind
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup vcpkg (script)
        run: bash scripts/setup-vcpkg.sh
      - name: Set up CMake latest
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: latest
      - name: Install LLVM/Clang ${{ matrix.llvm-version }}
        # Works inside the Fedora container: downloads official prebuilt toolchain.
        id: llvm
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "${{ matrix.llvm-version }}"
      - name: Show tool versions
        run: |
          cmake --version
          ninja --version
          clang++ --version || true
          llvm-config --version
      - name: Configure (${{ matrix.build-type }} with vcpkg)
        env:
          # Ensure a clean locale for tools that rely on UTF-8
          LC_ALL: C.UTF-8
          LANG: C.UTF-8
        run: cmake --preset=${{ matrix.build-type }} -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
      - name: Build
        run: cmake --build --preset=${{ matrix.build-type }} --parallel
      - name: Test
        env:
          LC_ALL: C.UTF-8
          LANG: C.UTF-8
        run: ctest --preset=${{ matrix.build-type }} --output-on-failure

  
