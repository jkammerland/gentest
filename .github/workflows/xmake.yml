name: Xmake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  xmake:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup CMake
        uses: actions/setup-cmake@v3
        with:
          cmake-version: '3.31.x'

      - name: Setup LLVM (20)
        uses: llvm/actions/setup-llvm@v1
        with:
          version: '20'

      - name: Install Xmake + deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y xmake ninja-build libfmt-dev

      - name: Install Xmake + deps (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install xmake ninja fmt

      - name: Install Xmake + deps (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          choco install -y xmake ninja

      - name: Setup vcpkg (Windows only)
        if: runner.os == 'Windows'
        uses: microsoft/setup-vcpkg@v1
        with:
          vcpkgDirectory: '${{ runner.temp }}/vcpkg'
          runVcpkgInstall: false
          appendedCacheKey: windows-xmake

      - name: Build generator (non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cmake -G Ninja -S . -B build/codegen -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_DIR="$LLVM_PATH/lib/cmake/llvm" -DClang_DIR="$LLVM_PATH/lib/cmake/clang"
          cmake --build build/codegen --target gentest_codegen -j 2

      - name: Build generator (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          cmake -G Ninja -S . -B build/codegen -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_FEATURE_FLAGS=manifests,versions \
            -DLLVM_DIR="$LLVM_PATH/lib/cmake/llvm" -DClang_DIR="$LLVM_PATH/lib/cmake/clang"
          cmake --build build/codegen --target gentest_codegen -j 2

      - name: Build + Run unit target
        shell: bash
        run: |
          xmake f -y
          xmake b gentest_unit_xmake
          xmake r gentest_unit_xmake

