// This file is auto-generated by gentest_codegen.
// Do not edit manually.

#include <array>
#include <exception>
#include <iostream>
#include <span>
#include <string_view>
#include <vector>

#include "gentest/runner.h"

{{FORWARD_DECLS}}
namespace {
struct Case {
    std::string_view name;
    void (*fn)();
    std::string_view file;
    unsigned line;
};

constexpr std::array<Case, {{CASE_COUNT}}> kCases = {
{{CASE_INITS}}
};
} // namespace

namespace {
bool wants_list(std::span<const char*> args) {
    for (const auto* arg : args) {
        if (arg != nullptr && std::string_view(arg) == "--list") {
            return true;
        }
    }
    return false;
}
} // namespace

auto {{ENTRY_FUNCTION}}(std::span<const char*> args) -> int {
    if (wants_list(args)) {
        for (const auto& test : kCases) {
            std::cout << test.name << " (" << test.file << ':' << test.line << ")\n";
        }
        return 0;
    }

    std::size_t executed = 0;
    int failures = 0;
    for (const auto& test : kCases) {
        ++executed;
        try {
            test.fn();
            std::cout << "[ PASS ] " << test.name << "\n";
        } catch (const gentest::failure& err) {
            ++failures;
            std::cerr << "[ FAIL ] " << test.name << " :: " << err.what() << "\n";
        } catch (const std::exception& err) {
            ++failures;
            std::cerr << "[ FAIL ] " << test.name << " :: unexpected std::exception: " << err.what() << "\n";
        } catch (...) {
            ++failures;
            std::cerr << "[ FAIL ] " << test.name << " :: unknown exception" << "\n";
        }
    }

    if (failures == 0) {
        std::cout << "Executed " << executed << " test(s).\n";
    } else {
        std::cerr << "Executed " << executed << " test(s) with " << failures << " failure(s).\n";
    }
    return failures == 0 ? 0 : 1;
}

auto {{ENTRY_FUNCTION}}(int argc, char** argv) -> int {
    std::vector<const char*> args;
    args.reserve(static_cast<std::size_t>(argc));
    for (int i = 0; i < argc; ++i) {
        args.push_back(argv[i]);
    }
    return {{ENTRY_FUNCTION}}(std::span<const char*>{args.data(), args.size()});
}
